{"ast":null,"code":"var _jsxFileName = \"/Users/sagarerin/Documents/GitHub/show-reel-app/src/components/Duration/TimeCode.js\";\nimport React, { Fragment } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst padLeadiingZero = (number, size) => {\n  let finalText = number.toString();\n\n  while (finalText.length < size) {\n    finalText = \"0\" + finalText;\n  }\n\n  return finalText;\n};\n\nconst TimeCode = props => {\n  const reelStandard = props.standard; //Todo: Extract standard condition handling outside this file\n\n  const framePerSec = reelStandard === \"PAL\" ? 25 : 30; // Todo: Handle props.standard is neither \"PAL\" nor \"NTSC\"\n\n  const totalFrames = +props.duration;\n  const ff = Math.floor(totalFrames % framePerSec);\n  const ffText = padLeadiingZero(ff, 2); // Convert totalFrames to seconds = TotalFrames divided by framePerSec.\n\n  const ss = Math.floor(totalFrames / framePerSec % 60);\n  const ssText = padLeadiingZero(ss, 2); // Convert totalFrames to minutes = TotalFrames divided by frames per minute.\n\n  const mm = Math.floor(totalFrames / (framePerSec * 60) % 60);\n  const mmText = padLeadiingZero(mm, 2); // Convert totalFrames to hours = TotalFrame divided by frames per hour which is (60 * 60 * framePerSec)\n\n  const hh = Math.floor(totalFrames / (60 * 60 * framePerSec));\n  const hhText = padLeadiingZero(hh, 2);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: hhText + \":\" + mmText + \":\" + ssText + \":\" + ffText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TimeCode;\nexport default TimeCode;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimeCode\");","map":{"version":3,"sources":["/Users/sagarerin/Documents/GitHub/show-reel-app/src/components/Duration/TimeCode.js"],"names":["React","Fragment","padLeadiingZero","number","size","finalText","toString","length","TimeCode","props","reelStandard","standard","framePerSec","totalFrames","duration","ff","Math","floor","ffText","ss","ssText","mm","mmText","hh","hhText"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,MAAMC,eAAe,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AACxC,MAAIC,SAAS,GAAGF,MAAM,CAACG,QAAP,EAAhB;;AACA,SAAOD,SAAS,CAACE,MAAV,GAAmBH,IAA1B,EAAgC;AAC9BC,IAAAA,SAAS,GAAG,MAAMA,SAAlB;AACD;;AACD,SAAOA,SAAP;AACD,CAND;;AAQA,MAAMG,QAAQ,GAAIC,KAAD,IAAW;AAC1B,QAAMC,YAAY,GAAGD,KAAK,CAACE,QAA3B,CAD0B,CAE1B;;AACA,QAAMC,WAAW,GAAGF,YAAY,KAAK,KAAjB,GAAyB,EAAzB,GAA8B,EAAlD,CAH0B,CAI1B;;AACA,QAAMG,WAAW,GAAG,CAACJ,KAAK,CAACK,QAA3B;AACA,QAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWJ,WAAW,GAAGD,WAAzB,CAAX;AACA,QAAMM,MAAM,GAAGhB,eAAe,CAACa,EAAD,EAAK,CAAL,CAA9B,CAP0B,CAQ1B;;AACA,QAAMI,EAAE,GAAGH,IAAI,CAACC,KAAL,CAAYJ,WAAW,GAAGD,WAAf,GAA8B,EAAzC,CAAX;AACA,QAAMQ,MAAM,GAAGlB,eAAe,CAACiB,EAAD,EAAK,CAAL,CAA9B,CAV0B,CAW1B;;AACA,QAAME,EAAE,GAAGL,IAAI,CAACC,KAAL,CAAYJ,WAAW,IAAID,WAAW,GAAG,EAAlB,CAAZ,GAAqC,EAAhD,CAAX;AACA,QAAMU,MAAM,GAAGpB,eAAe,CAACmB,EAAD,EAAK,CAAL,CAA9B,CAb0B,CAc1B;;AACA,QAAME,EAAE,GAAGP,IAAI,CAACC,KAAL,CAAWJ,WAAW,IAAI,KAAK,EAAL,GAAUD,WAAd,CAAtB,CAAX;AACA,QAAMY,MAAM,GAAGtB,eAAe,CAACqB,EAAD,EAAK,CAAL,CAA9B;AAEA,sBACE,QAAC,QAAD;AAAA,cAAWC,MAAM,GAAG,GAAT,GAAeF,MAAf,GAAwB,GAAxB,GAA8BF,MAA9B,GAAuC,GAAvC,GAA6CF;AAAxD;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CArBD;;KAAMV,Q;AAuBN,eAAeA,QAAf","sourcesContent":["import React, { Fragment } from \"react\";\n\nconst padLeadiingZero = (number, size) => {\n  let finalText = number.toString();\n  while (finalText.length < size) {\n    finalText = \"0\" + finalText;\n  }\n  return finalText;\n};\n\nconst TimeCode = (props) => {\n  const reelStandard = props.standard;\n  //Todo: Extract standard condition handling outside this file\n  const framePerSec = reelStandard === \"PAL\" ? 25 : 30;\n  // Todo: Handle props.standard is neither \"PAL\" nor \"NTSC\"\n  const totalFrames = +props.duration;\n  const ff = Math.floor(totalFrames % framePerSec);\n  const ffText = padLeadiingZero(ff, 2);\n  // Convert totalFrames to seconds = TotalFrames divided by framePerSec.\n  const ss = Math.floor((totalFrames / framePerSec) % 60);\n  const ssText = padLeadiingZero(ss, 2);\n  // Convert totalFrames to minutes = TotalFrames divided by frames per minute.\n  const mm = Math.floor((totalFrames / (framePerSec * 60)) % 60);\n  const mmText = padLeadiingZero(mm, 2);\n  // Convert totalFrames to hours = TotalFrame divided by frames per hour which is (60 * 60 * framePerSec)\n  const hh = Math.floor(totalFrames / (60 * 60 * framePerSec));\n  const hhText = padLeadiingZero(hh, 2);\n\n  return (\n    <Fragment>{hhText + \":\" + mmText + \":\" + ssText + \":\" + ffText}</Fragment>\n  );\n};\n\nexport default TimeCode;\n"]},"metadata":{},"sourceType":"module"}