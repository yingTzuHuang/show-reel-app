{"ast":null,"code":"var _jsxFileName = \"/Users/sagarerin/Documents/GitHub/show-reel-app/src/components/Duration/TotalDuration.js\";\nimport React from \"react\";\nimport TimeCode from \"./TimeCode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst convertTimeCodeToFrames = (timeCode, framePerSecond) => {\n  const timeCodeArr = timeCode.split(\":\");\n  const totalFrames = timeCodeArr[0] * 60 * 60 * framePerSecond + timeCodeArr[1] * 60 * framePerSecond + timeCodeArr[2] * framePerSecond + timeCodeArr[3];\n  return totalFrames;\n}; //Todo: Extract standard condition handling outside this file\n\n\nconst getVideoDuration = (video, standard) => {\n  const framePerSecond = standard === \"PAL\" ? 25 : 30; //Get video standard, start timecode & end timecode\n  //Split timcodes and convert them to frames\n\n  const startTimeTotalFrames = convertTimeCodeToFrames(video.startTimecode, framePerSecond);\n  console.log(\"check time\");\n  console.log(startTimeTotalFrames);\n  const endTimeTotalFrames = convertTimeCodeToFrames(video.endTimecode, framePerSecond);\n  console.log(endTimeTotalFrames); //Convert ff to milliseconds = ff * (25fpx or 30 fps) * 40ms)\n  //end timecode - start time code\n  //return final duration in frames\n\n  return endTimeTotalFrames - startTimeTotalFrames;\n};\n\nconst TotalDuration = props => {\n  let totalDuration = 0;\n  props.videos.forEach(video => {\n    totalDuration += getVideoDuration(video, props.standard);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Total Duration:\", /*#__PURE__*/_jsxDEV(TimeCode, {\n      duration: totalDuration,\n      standard: props.standard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n_c = TotalDuration;\nexport default TotalDuration;\n\nvar _c;\n\n$RefreshReg$(_c, \"TotalDuration\");","map":{"version":3,"sources":["/Users/sagarerin/Documents/GitHub/show-reel-app/src/components/Duration/TotalDuration.js"],"names":["React","TimeCode","convertTimeCodeToFrames","timeCode","framePerSecond","timeCodeArr","split","totalFrames","getVideoDuration","video","standard","startTimeTotalFrames","startTimecode","console","log","endTimeTotalFrames","endTimecode","TotalDuration","props","totalDuration","videos","forEach"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,uBAAuB,GAAG,CAACC,QAAD,EAAWC,cAAX,KAA8B;AAC5D,QAAMC,WAAW,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAApB;AACA,QAAMC,WAAW,GACfF,WAAW,CAAC,CAAD,CAAX,GAAiB,EAAjB,GAAsB,EAAtB,GAA2BD,cAA3B,GACAC,WAAW,CAAC,CAAD,CAAX,GAAiB,EAAjB,GAAsBD,cADtB,GAEAC,WAAW,CAAC,CAAD,CAAX,GAAiBD,cAFjB,GAGAC,WAAW,CAAC,CAAD,CAJb;AAMA,SAAOE,WAAP;AACD,CATD,C,CAUA;;;AACA,MAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC5C,QAAMN,cAAc,GAAGM,QAAQ,KAAK,KAAb,GAAqB,EAArB,GAA0B,EAAjD,CAD4C,CAG5C;AACA;;AACA,QAAMC,oBAAoB,GAAGT,uBAAuB,CAClDO,KAAK,CAACG,aAD4C,EAElDR,cAFkD,CAApD;AAIAS,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAZ;AACA,QAAMI,kBAAkB,GAAGb,uBAAuB,CAChDO,KAAK,CAACO,WAD0C,EAEhDZ,cAFgD,CAAlD;AAIAS,EAAAA,OAAO,CAACC,GAAR,CAAYC,kBAAZ,EAf4C,CAgB5C;AACA;AACA;;AACA,SAAOA,kBAAkB,GAAGJ,oBAA5B;AACD,CApBD;;AAsBA,MAAMM,aAAa,GAAIC,KAAD,IAAW;AAC/B,MAAIC,aAAa,GAAG,CAApB;AAEAD,EAAAA,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAsBZ,KAAD,IAAW;AAC9BU,IAAAA,aAAa,IAAIX,gBAAgB,CAACC,KAAD,EAAQS,KAAK,CAACR,QAAd,CAAjC;AACD,GAFD;AAIA,sBACE;AAAA,+CAEG,QAAC,QAAD;AAAU,MAAA,QAAQ,EAAES,aAApB;AAAmC,MAAA,QAAQ,EAAED,KAAK,CAACR;AAAnD;AAAA;AAAA;AAAA;AAAA,YAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAbD;;KAAMO,a;AAeN,eAAeA,aAAf","sourcesContent":["import React from \"react\";\nimport TimeCode from \"./TimeCode\";\n\nconst convertTimeCodeToFrames = (timeCode, framePerSecond) => {\n  const timeCodeArr = timeCode.split(\":\");\n  const totalFrames =\n    timeCodeArr[0] * 60 * 60 * framePerSecond +\n    timeCodeArr[1] * 60 * framePerSecond +\n    timeCodeArr[2] * framePerSecond +\n    timeCodeArr[3];\n\n  return totalFrames;\n};\n//Todo: Extract standard condition handling outside this file\nconst getVideoDuration = (video, standard) => {\n  const framePerSecond = standard === \"PAL\" ? 25 : 30;\n\n  //Get video standard, start timecode & end timecode\n  //Split timcodes and convert them to frames\n  const startTimeTotalFrames = convertTimeCodeToFrames(\n    video.startTimecode,\n    framePerSecond\n  );\n  console.log(\"check time\");\n  console.log(startTimeTotalFrames);\n  const endTimeTotalFrames = convertTimeCodeToFrames(\n    video.endTimecode,\n    framePerSecond\n  );\n  console.log(endTimeTotalFrames);\n  //Convert ff to milliseconds = ff * (25fpx or 30 fps) * 40ms)\n  //end timecode - start time code\n  //return final duration in frames\n  return endTimeTotalFrames - startTimeTotalFrames;\n};\n\nconst TotalDuration = (props) => {\n  let totalDuration = 0;\n\n  props.videos.forEach((video) => {\n    totalDuration += getVideoDuration(video, props.standard);\n  });\n\n  return (\n    <div>\n      Total Duration:\n      {<TimeCode duration={totalDuration} standard={props.standard} />}\n    </div>\n  );\n};\n\nexport default TotalDuration;\n"]},"metadata":{},"sourceType":"module"}