{"ast":null,"code":"var _jsxFileName = \"/Users/sagarerin/Documents/GitHub/show-reel-app/src/pages/AllReels.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState } from \"react\";\nimport React from \"react\";\nimport Reels from \"../components/Reels/Reels\";\nimport ReelVideos from \"../components/Reels/ReelVideos\";\nimport NewReel from \"./NewReel\"; //Todo: get items for reels from App (server/storage)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet reels = [{\n  id: 1,\n  name: \"Test Reel 001\",\n  standard: \"PAL\",\n  definition: \"SD\",\n  totalDuration: \"00:01:20:30\",\n  videoIds: [1]\n}];\n\nconst getReelVideos = (allVideos, reel) => {\n  let reelVideos = [];\n  allVideos.forEach(video => {\n    if (reel.videoIds.includes(video.id)) {\n      reelVideos.push(video);\n    }\n  });\n  return reelVideos;\n}; // Todo: Apply styles\n\n\nconst AllReels = props => {\n  _s();\n\n  let intialSelecteedReel = null;\n  let initialFilteredVideo = [];\n\n  if (reels.length > 0) {\n    initialSelectedReel = reels[0];\n    initialFilteredVideo = getReelVideos(props.videos, initialSelectedReel);\n  }\n\n  const [selectedReelItem, setSelectedReelItem] = useState(initialSelectedReel);\n  const [filteredVideos, setFilteredVideos] = useState(initialFilteredVideo);\n  const [reelItems, setReelItems] = useState(reels);\n\n  const addNewReelHandler = newReel => {\n    const reelData = { ...newReel,\n      //Todo: Consider to use other way to generate id\n      id: Math.random().toString(),\n      videoIds: []\n    }; // Change items of reels\n\n    setReelItems(previousReels => {\n      return [reelData, ...previousReels];\n    });\n    setSelectedReelItem();\n  };\n\n  const displayReelVideosHandler = selectedReel => {\n    const reelVideos = getReelVideos(props.videos, selectedReel);\n    setFilteredVideos(reelVideos);\n    setSelectedReelItem(selectedReel);\n  };\n\n  const removeVideoHandler = (video, reel) => {\n    reel.videoIds.pop(video.id);\n    const reels = [...reelItems];\n    const resetReels = reels.map(reelItem => reelItem.id === reel.id ? { ...reelItem,\n      videoIds: reel.videoIds\n    } : reelItem);\n    setReelItems(resetReels);\n    displayReelVideosHandler(reel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewReel, {\n      onAddNewReel: addNewReelHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Reels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), reelItems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Reels, {\n        items: reelItems,\n        onSelectReel: displayReelVideosHandler,\n        videos: props.videos,\n        filteredVideos: filteredVideos,\n        onChangeReelVideos: displayReelVideosHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ReelVideos, {\n        reel: selectedReelItem,\n        items: filteredVideos,\n        onRemoveVideo: removeVideoHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllReels, \"msnue7P4fQPQXf/CB/2Skwm5hro=\");\n\n_c = AllReels;\nexport default AllReels;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllReels\");","map":{"version":3,"sources":["/Users/sagarerin/Documents/GitHub/show-reel-app/src/pages/AllReels.js"],"names":["Fragment","useState","React","Reels","ReelVideos","NewReel","reels","id","name","standard","definition","totalDuration","videoIds","getReelVideos","allVideos","reel","reelVideos","forEach","video","includes","push","AllReels","props","intialSelecteedReel","initialFilteredVideo","length","initialSelectedReel","videos","selectedReelItem","setSelectedReelItem","filteredVideos","setFilteredVideos","reelItems","setReelItems","addNewReelHandler","newReel","reelData","Math","random","toString","previousReels","displayReelVideosHandler","selectedReel","removeVideoHandler","pop","resetReels","map","reelItem"],"mappings":"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","sourcesContent":["import { Fragment, useState } from \"react\";\nimport React from \"react\";\nimport Reels from \"../components/Reels/Reels\";\nimport ReelVideos from \"../components/Reels/ReelVideos\";\nimport NewReel from \"./NewReel\";\n\n//Todo: get items for reels from App (server/storage)\nlet reels = [\n  {\n    id: 1,\n    name: \"Test Reel 001\",\n    standard: \"PAL\",\n    definition: \"SD\",\n    totalDuration: \"00:01:20:30\",\n    videoIds: [1],\n  },\n];\n\nconst getReelVideos = (allVideos, reel) => {\n  let reelVideos = [];\n  allVideos.forEach((video) => {\n    if (reel.videoIds.includes(video.id)) {\n      reelVideos.push(video);\n    }\n  });\n  return reelVideos;\n};\n// Todo: Apply styles\nconst AllReels = (props) => {\n  let intialSelecteedReel = null;\n  let initialFilteredVideo = [];\n\n  if (reels.length > 0) {\n    initialSelectedReel = reels[0];\n    initialFilteredVideo = getReelVideos(props.videos, initialSelectedReel);\n  }\n\n  const [selectedReelItem, setSelectedReelItem] = useState(initialSelectedReel);\n  const [filteredVideos, setFilteredVideos] = useState(initialFilteredVideo);\n  const [reelItems, setReelItems] = useState(reels);\n\n  const addNewReelHandler = (newReel) => {\n    const reelData = {\n      ...newReel,\n      //Todo: Consider to use other way to generate id\n      id: Math.random().toString(),\n      videoIds: [],\n    };\n    // Change items of reels\n    setReelItems((previousReels) => {\n      return [reelData, ...previousReels];\n    });\n    setSelectedReelItem();\n  };\n  const displayReelVideosHandler = (selectedReel) => {\n    const reelVideos = getReelVideos(props.videos, selectedReel);\n    setFilteredVideos(reelVideos);\n    setSelectedReelItem(selectedReel);\n  };\n\n  const removeVideoHandler = (video, reel) => {\n    reel.videoIds.pop(video.id);\n    const reels = [...reelItems];\n    const resetReels = reels.map((reelItem) =>\n      reelItem.id === reel.id\n        ? { ...reelItem, videoIds: reel.videoIds }\n        : reelItem\n    );\n    setReelItems(resetReels);\n\n    displayReelVideosHandler(reel);\n  };\n\n  return (\n    <Fragment>\n      <NewReel onAddNewReel={addNewReelHandler} />\n      <h1>All Reels</h1>\n      {reelItems.length > 0 && (\n        <div>\n          <Reels\n            items={reelItems}\n            onSelectReel={displayReelVideosHandler}\n            videos={props.videos}\n            filteredVideos={filteredVideos}\n            onChangeReelVideos={displayReelVideosHandler}\n          />\n        </div>\n      )}\n      <div>\n        <ReelVideos\n          reel={selectedReelItem}\n          items={filteredVideos}\n          onRemoveVideo={removeVideoHandler}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default AllReels;\n"]},"metadata":{},"sourceType":"module"}