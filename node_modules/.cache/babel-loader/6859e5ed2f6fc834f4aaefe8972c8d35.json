{"ast":null,"code":"var _jsxFileName = \"/Users/sagarerin/Documents/GitHub/show-reel-app/src/pages/AllReels.js\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useState } from \"react\";\nimport React from \"react\";\nimport Reels from \"../components/Reels/Reels\";\nimport ReelVideos from \"../components/Reels/ReelVideos\";\nimport NewReel from \"./NewReel\"; //Todo: get items for reels from App (server/storage)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet reels = [];\n\nconst getReelVideos = (allVideos, reel) => {\n  let reelVideos = [];\n  allVideos.forEach(video => {\n    if (reel.videoIds.includes(video.id)) {\n      reelVideos.push(video);\n    }\n  });\n  return reelVideos;\n}; // Todo: Apply styles\n\n\nconst AllReels = props => {\n  _s();\n\n  let initialSelectedReelItem = null;\n  let initialFilteredVideos = [];\n\n  if (reels.length > 0) {\n    initialSelectedReelItem = reels[0];\n    initialFilteredVideos = getReelVideos(props.videos, initialSelectedReelItem);\n  }\n\n  const [selectedReelItem, setSelectedReelItem] = useState(initialSelectedReelItem);\n  const [filteredVideos, setFilteredVideos] = useState(initialFilteredVideos);\n  const [reelItems, setReelItems] = useState(reels);\n\n  const addNewReelHandler = newReel => {\n    const reelData = { ...newReel,\n      //Todo: Consider to use other way to generate id\n      id: Math.random().toString(),\n      videoIds: []\n    }; // Change items of reels\n\n    setReelItems(previousReels => {\n      return [reelData, ...previousReels];\n    });\n    setSelectedReelItem();\n    setFilteredVideos([]);\n  };\n\n  const displayReelVideosHandler = selectedReel => {\n    const reelVideos = getReelVideos(props.videos, selectedReel);\n    setFilteredVideos(reelVideos);\n    setSelectedReelItem(selectedReel);\n  };\n\n  const removeVideoHandler = (video, reel) => {\n    const videoIdIndex = reel.videoIds.indexOf(video.id);\n\n    if (videoIdIndex !== -1) {\n      reel.videoIds.splice(videoIdIndex, 1);\n    }\n\n    const reels = [...reelItems];\n    const resetReels = reels.map(reelItem => reelItem.id === reel.id ? { ...reelItem,\n      videoIds: reel.videoIds\n    } : reelItem);\n    setReelItems(resetReels);\n    displayReelVideosHandler(reel);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NewReel, {\n      onAddNewReel: addNewReelHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Reels\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), reelItems.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Reels, {\n        items: reelItems,\n        onSelectReel: displayReelVideosHandler,\n        videos: props.videos,\n        filteredVideos: filteredVideos,\n        onChangeReelVideos: displayReelVideosHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Reel Videos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReelVideos, {\n        reel: selectedReelItem,\n        items: filteredVideos,\n        onRemoveVideo: removeVideoHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllReels, \"aT5Un8cfxlmmGKuD+iGHaomi6mE=\");\n\n_c = AllReels;\nexport default AllReels;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllReels\");","map":{"version":3,"sources":["/Users/sagarerin/Documents/GitHub/show-reel-app/src/pages/AllReels.js"],"names":["Fragment","useState","React","Reels","ReelVideos","NewReel","reels","getReelVideos","allVideos","reel","reelVideos","forEach","video","videoIds","includes","id","push","AllReels","props","initialSelectedReelItem","initialFilteredVideos","length","videos","selectedReelItem","setSelectedReelItem","filteredVideos","setFilteredVideos","reelItems","setReelItems","addNewReelHandler","newReel","reelData","Math","random","toString","previousReels","displayReelVideosHandler","selectedReel","removeVideoHandler","videoIdIndex","indexOf","splice","resetReels","map","reelItem"],"mappings":"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","sourcesContent":["import { Fragment, useState } from \"react\";\nimport React from \"react\";\nimport Reels from \"../components/Reels/Reels\";\nimport ReelVideos from \"../components/Reels/ReelVideos\";\nimport NewReel from \"./NewReel\";\n\n//Todo: get items for reels from App (server/storage)\nlet reels = [];\n\nconst getReelVideos = (allVideos, reel) => {\n  let reelVideos = [];\n  allVideos.forEach((video) => {\n    if (reel.videoIds.includes(video.id)) {\n      reelVideos.push(video);\n    }\n  });\n  return reelVideos;\n};\n// Todo: Apply styles\nconst AllReels = (props) => {\n  let initialSelectedReelItem = null;\n  let initialFilteredVideos = [];\n  if (reels.length > 0) {\n    initialSelectedReelItem = reels[0];\n    initialFilteredVideos = getReelVideos(\n      props.videos,\n      initialSelectedReelItem\n    );\n  }\n  const [selectedReelItem, setSelectedReelItem] = useState(\n    initialSelectedReelItem\n  );\n  const [filteredVideos, setFilteredVideos] = useState(initialFilteredVideos);\n  const [reelItems, setReelItems] = useState(reels);\n\n  const addNewReelHandler = (newReel) => {\n    const reelData = {\n      ...newReel,\n      //Todo: Consider to use other way to generate id\n      id: Math.random().toString(),\n      videoIds: [],\n    };\n    // Change items of reels\n    setReelItems((previousReels) => {\n      return [reelData, ...previousReels];\n    });\n    setSelectedReelItem();\n    setFilteredVideos([]);\n  };\n  const displayReelVideosHandler = (selectedReel) => {\n    const reelVideos = getReelVideos(props.videos, selectedReel);\n    setFilteredVideos(reelVideos);\n    setSelectedReelItem(selectedReel);\n  };\n\n  const removeVideoHandler = (video, reel) => {\n    const videoIdIndex = reel.videoIds.indexOf(video.id);\n\n    if (videoIdIndex !== -1) {\n      reel.videoIds.splice(videoIdIndex, 1);\n    }\n\n    const reels = [...reelItems];\n    const resetReels = reels.map((reelItem) =>\n      reelItem.id === reel.id\n        ? { ...reelItem, videoIds: reel.videoIds }\n        : reelItem\n    );\n    setReelItems(resetReels);\n\n    displayReelVideosHandler(reel);\n  };\n\n  return (\n    <Fragment>\n      <NewReel onAddNewReel={addNewReelHandler} />\n      <h1>All Reels</h1>\n      {reelItems.length > 0 && (\n        <div>\n          <Reels\n            items={reelItems}\n            onSelectReel={displayReelVideosHandler}\n            videos={props.videos}\n            filteredVideos={filteredVideos}\n            onChangeReelVideos={displayReelVideosHandler}\n          />\n        </div>\n      )}\n      <div>\n        <h2>Reel Videos</h2>\n        <ReelVideos\n          reel={selectedReelItem}\n          items={filteredVideos}\n          onRemoveVideo={removeVideoHandler}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default AllReels;\n"]},"metadata":{},"sourceType":"module"}